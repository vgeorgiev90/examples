Parameters:
  InstanceImage:
    Type: String
  SSHKey:
    Type: String
  VmType:
    Type: String
  SubnetPublicId:
    Type: String
  ClusterName:
    Type: String
  awsConfig:
    Type: String
  awsCredentials:
    Type: String
  BastionSecurityGroup:
    Type: String
## Monitoring stack variables
  GrafanaUser:
    Type: String
  GrafanaPassword:
    Type: String
  GrafanaKey:
    Type: String
  InfluxUser:
    Type: String
  InfluxPassword:
    Type: String
  InfluxDb:
    Type: String
  OpsgenieApiKey:
    Type: String
  OpsgenieUrl:
    Type: String
  OpsgenieEnabled:
    Type: String
  TelegrafUser:
    Type: String
  TelegrafPassword:
    Type: String
  TeamName:
    Type: String
  Environment:
    Type: String
  DnsZoneId:
    Type: String


Resources:

### Instance declaration
  BastionHost:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install:
            - Setup
        Setup:
          files:
            /root/values.yaml:
              owner: root
              group: root
              mode: '000640'
              content: !Sub |
                chronograf_resources: {}
                fullnameOverride: ""
                nameOverride: ""
                team_name: ${TeamName}
                environment: ${Environment}
                ## namespace
                namespace: monitoring
                ## Grafana
                grafana:
                  admin_password: ${GrafanaPassword}
                  admin_user: ${GrafanaUser}
                  secret_key: ${GrafanaKey}
                  service_annotations:
                    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
                grafana_resources: {}
                ### InfluxDB
                influx:
                  admin_password: ${InfluxPassword}
                  admin_user: ${InfluxUser}
                  database_name: ${InfluxDb}
                influx_resources: {}
                ### Kapacitor
                kapacitor:
                  opsgenie_api_key: ${OpsgenieApiKey}
                  opsgenie_enabled: ${OpsgenieEnabled}
                  opsgenie_url: ${OpsgenieUrl}
                kapacitor_resources: {}
                ## Telegraf
                telegraf:
                  admin_password: ${TelegrafPassword}
                  admin_user: ${TelegrafUser}
                telegraf_resources: {}

            /root/add-route53-record.sh:
              owner: root
              group: root
              mode: '000750'
              content: |
                #!/bin/bash
                export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin'
                DNS_ZONE=${1}
                DNS_NAME=$(aws route53 get-hosted-zone --id ${DNS_ZONE} | grep Name | head -1 | awk -F":" '{print $2}' | awk -F"\"" '{print $2}')
                LB1_CHRONO_DNS=$(kubectl -n monitoring get svc | grep chronograf | awk '{print $4}')
                LB2_GRAFANA_DNS=$(kubectl -n monitoring get svc | grep grafana | awk '{print $4}')
                LB1_NAME=$(kubectl -n monitoring get svc | grep chronograf | awk '{print $4}' | awk -F"-" '{print $1}')
                LB2_NAME=$(kubectl -n monitoring get svc | grep grafana | awk '{print $4}' | awk -F"-" '{print $1}')
                LB1_HOSTED_ZONE=$(aws elb describe-load-balancers --load-balancer-name ${LB1_NAME} | grep CanonicalHostedZoneNameID | awk -F":" '{print $2}' | awk -F"\"" '{print $2}')
                LB2_HOSTED_ZONE=$(aws elb describe-load-balancers --load-balancer-name ${LB2_NAME} | grep CanonicalHostedZoneNameID | awk -F":" '{print $2}' | awk -F"\"" '{print $2}')
                cat > chronograf-record-set.json << EOF
                {
                  "Comment": "Chronograf monitoring record",
                  "Changes": [{
                        "Action": "CREATE",
                        "ResourceRecordSet": {
                            "Name": "alerts.${DNS_NAME}",
                            "Type": "A",
                            "AliasTarget":{
                                    "HostedZoneId": "${LB1_HOSTED_ZONE}",
                                    "DNSName": "dualstack.${LB1_CHRONO_DNS}",
                                    "EvaluateTargetHealth": false
                              }}
                          }]
                }
                EOF
                cat > grafana-record-set.json << EOF
                {
                  "Comment": "Grafana monitoring record",
                  "Changes": [{
                        "Action": "CREATE",
                        "ResourceRecordSet": {
                            "Name": "monitoring.${DNS_NAME}",
                            "Type": "A",
                            "AliasTarget":{
                                    "HostedZoneId": "${LB2_HOSTED_ZONE}",
                                    "DNSName": "dualstack.${LB2_GRAFANA_DNS}",
                                    "EvaluateTargetHealth": false
                              }}
                          }]
                }
                EOF
                echo "Creating record for alerts.${DNS_NAME}"
                aws route53 change-resource-record-sets --hosted-zone-id ${DNS_ZONE} --change-batch file://chronograf-record-set.json
                echo "Creating record for monitoring.${DNS_NAME}"
                aws route53 change-resource-record-sets --hosted-zone-id ${DNS_ZONE} --change-batch file://grafana-record-set.json

            /root/.aws/config:
              content:
                Ref: awsConfig
              owner: root
              group: root
              mode: '000640'
            /root/.aws/credentials:
              content:
                Ref: awsCredentials
              owner: root
              group: root
              mode: '000640'
          commands:
            '01_get_awscli':
               command: !Sub |
                 pip install awscli && \
                 curl -o /usr/local/bin/aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator && \
                 chmod +x /usr/local/bin/aws-iam-authenticator
               ignoreErrors: true
            '02_get_kubectl':
               command: !Sub |
                 curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
                 echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list && \
                 apt update && apt install kubectl -y
               ignoreErrors: true
            '03_config_kubectl':
               command: !Sub |
                 aws eks --region ${AWS::Region} update-kubeconfig --name $CLUSTER
               env:
                 CLUSTER:
                   Ref: ClusterName
               ignoreErrors: true
            '04_install_helm':
               command: !Sub |
                 wget https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz && \
                 tar -xzf helm-v3.0.2-linux-amd64.tar.gz --strip-components=1 -C /usr/local/bin
               ignoreErrors: true
            '05_get_tick_stack_chart':
               command: !Sub |
                 git clone https://github.com/vgeorgiev90/Containers.git
               ignoreErrors: true
            '06_install_tick_stack':
               command: !Sub |
                 export AWS_SHARED_CREDENTIALS_FILE=/root/.aws/credentials && \
                 export AWS_CONFIG_FILE=/root/.aws/config && \
                 export KUBECONFIG=/root/.kube/config && \
                 helm install monitoring /Containers/kubernetes/helm/my-charts/tick-stack -f /root/values.yaml --kubeconfig /root/.kube/config
               cwd: /root
               ignoreErrors: true
            '07_update_route53_with_new_DNS_records':
               command: !Sub |
                 sleep 120 && \
                 /root/add-route53-record.sh $DNS_ZONE_ID
               env:
                 AWS_SHARED_CREDENTIALS_FILE: /root/.aws/credentials
                 AWS_CONFIG_FILE: /root/.aws/config
                 DNS_ZONE_ID:
                   Ref: DnsZoneId
               cwd: /root
               ignoreErrors: true
    Properties:
      ImageId:
        Ref: InstanceImage
      KeyName:
        Ref: SSHKey
      InstanceType:
        Ref: VmType
      SecurityGroupIds:
        - Ref: BastionSecurityGroup
      SubnetId:
        Ref: SubnetPublicId
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          apt update && apt install python-pip -y
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionHost --configsets install --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName}   --resource BastionHost --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: Bastion-Host


